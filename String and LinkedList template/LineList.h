/*
 * LineList.h
 *
 *  Created on: May 24, 2019
 *      Author: Yogesh Nimbhorkar
 */

#ifndef LINELIST_H_
#define LINELIST_H_

#include "Line.h"

class LineList {
private:
//	Number of elements in this list
	int theSize { 0 };
//	A private member type (an inner class)
	class Node;
//	Pointer to the first node in this list
	Node *head { nullptr };
//	Pointer to the last node in this list
	Node *tail { nullptr };
//		Extra methods implemented as utility
//		Check if given index is valid
	bool validIndex(int) const;
//		deep copies the linelist
	void deepCopy(const LineList &);
//		Returns the pointer of node at position
	Node * find(int) const;
//		Empty LineList
	void removeAll();

public:
//	Default constructor
	LineList();
//	Destructor
	virtual ~LineList();
//	Copy constructor
	LineList(const LineList &);
//	Copy assignment
	const LineList & operator=(const LineList &);
//	Inserts line at the front of the this list
	void push_front(const Line &);
//	Inserts line at the end of the this list
	void push_back(const Line &);
//	Remove the first node in this list
	void pop_front();
//	Remove the last node in this list
	void pop_back();
//	Returns the size of this list
	int size() const;
//	Returns whether this list is empty
	bool empty() const;
//	Inserts a new line at position k in this list
	void insert(const Line &, int);
//	Removes node at position k in this list
	void remove(int);
//	Returns the line at position k in this list
	Line get(int) const;
//	Prints the line text
	void print() const;

};
//Forward defining struct node
struct LineList::Node {

private:
	/**	 node data */
	Line data;
	/**	 pointer to previous node */
	Node * prev { nullptr };
	/**	 pointer to next node */
	Node * next { nullptr };

public:
	/** Not allowing to instanciate default node constructor	 */
	Node() = delete;

	/** Forcing a copy assignment operator to be generated by the compiler.*/
	Node(const Node &) = default;

	/** Overloads operator << as a friend function
	 *
	 * @param line reference to type Line
	 * @param prev pointer to object of type Node
	 * @param next pointer to object of type Node
	 */
	Node(const Line & line, Node * prev = nullptr, Node * next = nullptr) :
			data { line }, prev { prev }, next { next } { // @suppress("Symbol is not resolved")
	}

	/** Destructor */
	~Node() = default;

	/** setter for data
	 *
	 * @param l reference to type Line
	 */
	void setData(const Line & line) {
		data = line;
	}

	/** setter for prev
	 *
	 * @param p pointer to type Node
	 */
	void setPrev(Node * pp) {
		prev = pp;
	}

	/** setter for next
	 *
	 * @param n pointer to type Node
	 */
	void setNext(Node * pn) {
		next = pn;
	}

	/** getter for data
	 *
	 * @return data referece to type Line
	 */
	const Line & getData() const {
		return data;
	}

	/** Getter for prev
	 *
	 * @return  reference to type Line
	 */
	Node * getPrev() const {
		return prev;
	}

	/** Getter for next
	 *
	 * @return next pointer to type Node
	 */
	Node * getNext() const {
		return next;
	}

};

#endif /* LINELIST_H_ */
